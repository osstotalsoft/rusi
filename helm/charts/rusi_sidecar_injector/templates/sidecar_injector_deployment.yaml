apiVersion: apps/v1
kind: Deployment
metadata:
  name: rusi-sidecar-injector
  labels:
    app: rusi-sidecar-injector
spec:
  selector:
    matchLabels:
      app: rusi-sidecar-injector
  template:
    metadata:
      labels:
        app: rusi-sidecar-injector
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Values.global.tag }}
        app.kubernetes.io/component: sidecar-injector
        app.kubernetes.io/part-of: "rusi"
        app.kubernetes.io/managed-by: "helm"
{{- if eq .Values.global.prometheus.enabled true }}
      annotations:
        prometheus.io/scrape: "{{ .Values.global.prometheus.enabled }}"
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        prometheus.io/path: "/"
{{- end }}
    spec:
      serviceAccountName: rusi-operator
      containers:
      - name: rusi-sidecar-injector
{{- if contains "/" .Values.injectorImage.name }}
        image: "{{ .Values.injectorImage.name }}"
{{- else }}
        image: "{{ .Values.global.registry }}/rusi:{{ .Values.global.tag }}"
{{- end }}
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        securityContext:
  {{- if eq .Values.runAsNonRoot true }}
          runAsNonRoot: {{ .Values.runAsNonRoot }}
  {{- else }}
          runAsUser: 1000
  {{- end }}
  {{- if eq .Values.debug.enabled true }}
          capabilities:
            add:
              - SYS_PTRACE
  {{- end }}
        command:
{{- if eq .Values.debug.enabled false }}
        - "/injector"
{{- else }}
        - "/dlv"
{{- end }}
        args:
{{- if eq .Values.debug.enabled true }}
        - "--listen=:{{ .Values.debug.port }}"
        - "--accept-multiclient"
        - "--headless=true"
        - "--log"
        - "--api-version=2"
        - "exec"
        - "/injector"
        - "--"
{{- end }}
        - "--v"
        - "{{ .Values.logLevel }}"
{{- if eq .Values.global.prometheus.enabled true }}
        - "--enable-metrics"
        - "--metrics-port"
        - "{{ .Values.global.prometheus.port }}"
{{- else }}
        #- "--enable-metrics=false"
{{- end }}
        env:
        - name: TLS_CERT_FILE
          value: /rusi/cert/tls.crt
        - name: TLS_KEY_FILE
          value: /rusi/cert/tls.key
{{- if .Values.kubeClusterDomain }}
        - name: KUBE_CLUSTER_DOMAIN
          value: "{{ .Values.kubeClusterDomain }}"
{{- end }}
        - name: SIDECAR_IMAGE
{{- if contains "/" .Values.image.name }}
          value: "{{ .Values.image.name }}"
{{- else }}
          value: "{{ .Values.global.registry }}/rusid:{{ .Values.global.tag }}"
{{- end }}
        - name: SIDECAR_IMAGE_PULL_POLICY
          value: "{{ .Values.sidecarImagePullPolicy }}"
        - name: SIDECAR_IMAGE_PULL_SECRETS
          value: "{{ .Values.global.imagePullSecrets }}"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - name: https
          containerPort: 4000
          protocol: TCP
{{- if eq .Values.global.prometheus.enabled true }}
        - name: metrics
          containerPort: {{ .Values.global.prometheus.port }}
          protocol: TCP
{{- end }}
{{- if eq .Values.debug.enabled true }}
        - name: debug
          containerPort: {{ .Values.debug.port }}
          protocol: TCP
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: cert
          mountPath: /rusi/cert
          readOnly: true
      volumes:
      - name: cert
        secret:
          secretName: rusi-sidecar-injector-cert
{{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.global.imagePullSecrets }}
{{- end }}
{{- if .Values.global.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.global.nodeSelector | indent 8 }}
{{- end }}
